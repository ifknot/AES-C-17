#include "catch2.h"

#include <stdio.h>
#include <string.h>
#include <stdint.h>

#include <iostream>

#include "kokke_aes.h"
#include "../util/stopwatch.h"

static const size_t SAMPLES = 1'000'000;
static const size_t TRIALS = 10;

static int test_encrypt_ecb(void)
{
#if defined(AES256)
    uint8_t key[] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
    uint8_t out[] = { 0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8 };
#elif defined(AES192)
    uint8_t key[] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
                      0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
    uint8_t out[] = { 0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc };
#elif defined(AES128)std::cout << "\nT encrypt = " << sw.elapsed() << std::endl;
    uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
    uint8_t out[] = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };
#endif

    uint8_t in[]  = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
    struct AES_ctx ctx;

    AES_init_ctx(&ctx, key);
    AES_ECB_encrypt(&ctx, in);

    //printf("ECB encrypt: ");

    if (0 == memcmp((char*) out, (char*) in, 16)) {
        //printf("SUCCESS!\n");
        return(0);
    } else {
        //printf("FAILURE!\n");
        return(1);
    }
}

TEST_CASE("Performance kokke ECB ", "[kokke performance]") {

    util::stopwatch<std::chrono::milliseconds> sw;

    REQUIRE(test_encrypt_ecb() == 0);

    uint8_t key[] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
    uint8_t out[] = { 0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8 };

    uint8_t in[]  = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
    struct AES_ctx ctx;

    AES_init_ctx(&ctx, key);

    for(size_t j{0}; j < TRIALS; ++j) {
        sw.start();
        for (auto i{0}; i < SAMPLES; ++i) {
            AES_ECB_encrypt(&ctx, in);
        }
        sw.stop();
        std::cout << "\nT encrypt" << SAMPLES << " = " << sw.elapsed() / 1000.0 << std::endl;
    }

    for(size_t j{0}; j < TRIALS; ++j) {
        sw.start();
        for (auto i{0}; i < SAMPLES; ++i) {
            AES_ECB_decrypt(&ctx, in);
        }
        sw.stop();
        std::cout << "\nT decrypt" << SAMPLES << " = " << sw.elapsed() / 1000.0 << std::endl;
    }

}